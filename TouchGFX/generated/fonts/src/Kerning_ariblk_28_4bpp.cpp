#include <touchgfx/Font.hpp>

FONT_KERNING_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::KerningNode kerning_ariblk_28_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE =
{
    { 0x0066,  2 },  // (First char = [0x0066, f], Second char = [0x0020,  ], Kerning dist = 2)
    { 0x0043,  1 },  // (First char = [0x0043, C], Second char = [0x002C, ,], Kerning dist = 1)
    { 0x0050, -5 },  // (First char = [0x0050, P], Second char = [0x002C, ,], Kerning dist = -5)
    { 0x0051,  1 },  // (First char = [0x0051, Q], Second char = [0x002C, ,], Kerning dist = 1)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x002C, ,], Kerning dist = -4)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0059, -5 },  // (First char = [0x0059, Y], Second char = [0x002C, ,], Kerning dist = -5)
    { 0x0066, -1 },  // (First char = [0x0066, f], Second char = [0x002C, ,], Kerning dist = -1)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x002C, ,], Kerning dist = -2)
    { 0x0076, -2 },  // (First char = [0x0076, v], Second char = [0x002C, ,], Kerning dist = -2)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x002C, ,], Kerning dist = -2)
    { 0x0079, -2 },  // (First char = [0x0079, y], Second char = [0x002C, ,], Kerning dist = -2)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0050, -5 },  // (First char = [0x0050, P], Second char = [0x002E, .], Kerning dist = -5)
    { 0x0054, -4 },  // (First char = [0x0054, T], Second char = [0x002E, .], Kerning dist = -4)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x002E, .], Kerning dist = -1)
    { 0x0059, -5 },  // (First char = [0x0059, Y], Second char = [0x002E, .], Kerning dist = -5)
    { 0x0066, -2 },  // (First char = [0x0066, f], Second char = [0x002E, .], Kerning dist = -2)
    { 0x0072, -2 },  // (First char = [0x0072, r], Second char = [0x002E, .], Kerning dist = -2)
    { 0x0076, -3 },  // (First char = [0x0076, v], Second char = [0x002E, .], Kerning dist = -3)
    { 0x0077, -2 },  // (First char = [0x0077, w], Second char = [0x002E, .], Kerning dist = -2)
    { 0x0079, -3 },  // (First char = [0x0079, y], Second char = [0x002E, .], Kerning dist = -3)
    { 0x0066,  2 },  // (First char = [0x0066, f], Second char = [0x003F, ?], Kerning dist = 2)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0041, A], Kerning dist = -1)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0041, A], Kerning dist = -1)
    { 0x0050, -2 },  // (First char = [0x0050, P], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0041, A], Kerning dist = -2)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0041, A], Kerning dist = -3)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0043, C], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0043, C], Kerning dist = -2)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x004F, O], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x004F, O], Kerning dist = -2)
    { 0x0041, -1 },  // (First char = [0x0041, A], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0051, Q], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0054, T], Kerning dist = -2)
    { 0x004F, -1 },  // (First char = [0x004F, O], Second char = [0x0054, T], Kerning dist = -1)
    { 0x0041, -2 },  // (First char = [0x0041, A], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0044, -1 },  // (First char = [0x0044, D], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x004F, -2 },  // (First char = [0x004F, O], Second char = [0x0059, Y], Kerning dist = -2)
    { 0x0051, -1 },  // (First char = [0x0051, Q], Second char = [0x0059, Y], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0061, a], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0061, a], Kerning dist = -2)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0063, c], Kerning dist = -2)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0063, c], Kerning dist = -1)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0064, d], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0064, d], Kerning dist = -3)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0064, d], Kerning dist = 1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0065, e], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0059, -3 },  // (First char = [0x0059, Y], Second char = [0x0065, e], Kerning dist = -3)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x0065, e], Kerning dist = -1)
    { 0x0066,  1 },  // (First char = [0x0066, f], Second char = [0x0066, f], Kerning dist = 1)
    { 0x0065,  1 },  // (First char = [0x0065, e], Second char = [0x0067, g], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0067, g], Kerning dist = 1)
    { 0x0054,  1 },  // (First char = [0x0054, T], Second char = [0x0068, h], Kerning dist = 1)
    { 0x0057,  1 },  // (First char = [0x0057, W], Second char = [0x0068, h], Kerning dist = 1)
    { 0x0057,  1 },  // (First char = [0x0057, W], Second char = [0x0069, i], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006B, k], Kerning dist = 1)
    { 0x0054,  1 },  // (First char = [0x0054, T], Second char = [0x006C, l], Kerning dist = 1)
    { 0x0063, -1 },  // (First char = [0x0063, c], Second char = [0x006C, l], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006C, l], Kerning dist = 1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x006D, m], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006D, m], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x006E, n], Kerning dist = 1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0050, -1 },  // (First char = [0x0050, P], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x006F, o], Kerning dist = -2)
    { 0x0057, -1 },  // (First char = [0x0057, W], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x006F, o], Kerning dist = -2)
    { 0x006B, -1 },  // (First char = [0x006B, k], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0076, -1 },  // (First char = [0x0076, v], Second char = [0x006F, o], Kerning dist = -1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0070, p], Kerning dist = -1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0070, p], Kerning dist = 1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0072, r], Kerning dist = -1)
    { 0x0067,  1 },  // (First char = [0x0067, g], Second char = [0x0072, r], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0072, r], Kerning dist = 1)
    { 0x0054, -2 },  // (First char = [0x0054, T], Second char = [0x0073, s], Kerning dist = -2)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0073, s], Kerning dist = 1)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0074, t], Kerning dist = 1)
    { 0x004B, -1 },  // (First char = [0x004B, K], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0054, -1 },  // (First char = [0x0054, T], Second char = [0x0075, u], Kerning dist = -1)
    { 0x0059, -2 },  // (First char = [0x0059, Y], Second char = [0x0075, u], Kerning dist = -2)
    { 0x0072,  1 },  // (First char = [0x0072, r], Second char = [0x0075, u], Kerning dist = 1)
    { 0x0059, -1 },  // (First char = [0x0059, Y], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0062, -1 },  // (First char = [0x0062, b], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0065, -1 },  // (First char = [0x0065, e], Second char = [0x0076, v], Kerning dist = -1)
    { 0x006E, -1 },  // (First char = [0x006E, n], Second char = [0x0076, v], Kerning dist = -1)
    { 0x006F, -1 },  // (First char = [0x006F, o], Second char = [0x0076, v], Kerning dist = -1)
    { 0x0072,  2 },  // (First char = [0x0072, r], Second char = [0x0076, v], Kerning dist = 2)
    { 0x0070, -1 },  // (First char = [0x0070, p], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0073, -1 },  // (First char = [0x0073, s], Second char = [0x0077, w], Kerning dist = -1)
    { 0x0072,  2 },  // (First char = [0x0072, r], Second char = [0x0079, y], Kerning dist = 2)
};
