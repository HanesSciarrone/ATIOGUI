/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#include <gui_generated/inputidscreen_screen/InputIDScreenViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

InputIDScreenViewBase::InputIDScreenViewBase() :
    buttonCallback(this, &InputIDScreenViewBase::buttonCallbackHandler)
{

    Background.setPosition(0, 0, 800, 480);
    Background.setColor(touchgfx::Color::getColorFrom24BitRGB(41, 73, 105));

    ToolBar.setPosition(0, 0, 800, 62);
    ToolBar.setColor(touchgfx::Color::getColorFrom24BitRGB(145, 145, 145));

    logo.setBitmap(touchgfx::Bitmap(BITMAP_CONTROLGAS_ID));
    logo.setPosition(0, 1, 153, 60);
    logo.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);

    PadNumericID.setXY(54, 105);

    titleInputID.setXY(153, 137);
    titleInputID.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    titleInputID.setLinespacing(0);
    titleInputID.setTypedText(touchgfx::TypedText(T_SINGLEUSEID14));

    BtnAccept.setXY(309, 308);
    BtnAccept.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    BtnAccept.setLabelText(touchgfx::TypedText(T_SINGLEUSEID17));
    BtnAccept.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    BtnAccept.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    BtnAccept.setAction(buttonCallback);

    BtnCancel.setXY(68, 308);
    BtnCancel.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    BtnCancel.setLabelText(touchgfx::TypedText(T_SINGLEUSEID18));
    BtnCancel.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    BtnCancel.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    BtnCancel.setAction(buttonCallback);

    background_progress.setPosition(0, 0, 800, 480);
    background_progress.setVisible(false);
    background_progress.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    background_progress.setAlpha(114);

    progress_bar.setXY(198, 235);
    progress_bar.setProgressIndicatorPosition(2, 2, 400, 30);
    progress_bar.setRange(0, 100);
    progress_bar.setDirection(touchgfx::AbstractDirectionProgress::RIGHT);
    progress_bar.setBackground(touchgfx::Bitmap(BITMAP_BLUE_PROGRESSINDICATORS_BG_LARGE_PROGRESS_INDICATOR_BG_SQUARE_0_DEGREES_ID));
    progress_bar.setBitmap(BITMAP_BLUE_PROGRESSINDICATORS_FILL_TILING_PROGRESS_INDICATOR_FILL_STRIPED_WIDE_HORIZONTAL_ID);
    progress_bar.setValue(58);
    progress_bar.setAnchorAtZero(false);
    progress_bar.setVisible(false);

    pop_up.setBackground(touchgfx::BitmapId(BITMAP_BACKGROUND_QWERTY_ID), 150, 105);
    pop_up.setShadeColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
    pop_up.setShadeAlpha(200);
    pop_up.hide();

    label_pop_up.setXY(108, 67);
    label_pop_up.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    label_pop_up.setLinespacing(0);
    label_pop_up.setTypedText(touchgfx::TypedText(T_SINGLEUSEID28));
    pop_up.add(label_pop_up);

    button_ok_pop_up.setXY(315, 190);
    button_ok_pop_up.setBitmaps(touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), touchgfx::Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
    button_ok_pop_up.setLabelText(touchgfx::TypedText(T_SINGLEUSEID29));
    button_ok_pop_up.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    button_ok_pop_up.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
    button_ok_pop_up.setAction(buttonCallback);
    pop_up.add(button_ok_pop_up);

    add(Background);
    add(ToolBar);
    add(logo);
    add(PadNumericID);
    add(titleInputID);
    add(BtnAccept);
    add(BtnCancel);
    add(background_progress);
    add(progress_bar);
    add(pop_up);
}

void InputIDScreenViewBase::setupScreen()
{
    PadNumericID.initialize();
}

void InputIDScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &BtnAccept)
    {
        //SendCredential
        //When BtnAccept clicked call virtual function
        //Call send_credential
        send_credential();
    }
    else if (&src == &BtnCancel)
    {
        //GoMainScreen
        //When BtnCancel clicked change screen to MainScreen
        //Go to MainScreen with screen transition towards North
        application().gotoMainScreenScreenCoverTransitionNorth();
    }
    else if (&src == &button_ok_pop_up)
    {
        //hide_pop_up
        //When button_ok_pop_up clicked hide pop_up
        //Hide pop_up
        pop_up.setVisible(false);
        pop_up.invalidate();
    }
}
