/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef OPERATIONPUMPSCREENVIEWBASE_HPP
#define OPERATIONPUMPSCREENVIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/operationpumpscreen_screen/OperationPumpScreenPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/containers/progress_indicators/CircleProgress.hpp>
#include <touchgfx/widgets/canvas/PainterRGB888Bitmap.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/RadioButton.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/containers/ModalWindow.hpp>
#include <touchgfx/Color.hpp>
#include <touchgfx/widgets/RadioButtonGroup.hpp>

class OperationPumpScreenViewBase : public touchgfx::View<OperationPumpScreenPresenter>
{
public:
    OperationPumpScreenViewBase();
    virtual ~OperationPumpScreenViewBase() {}
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void pay_sale_action()
    {
        // Override and implement this function in OperationPumpScreen
    }

    virtual void dispatch_fuel_action()
    {
        // Override and implement this function in OperationPumpScreen
    }

    virtual void stop_dispache_action()
    {
        // Override and implement this function in OperationPumpScreen
    }

    virtual void set_pump_selected(int value)
    {
        // Override and implement this function in OperationPumpScreen
    }

    virtual void select_types_fuel()
    {
        // Override and implement this function in OperationPumpScreen
    }

    virtual void cancel_sale_action()
    {
        // Override and implement this function in OperationPumpScreen
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box background;
    touchgfx::Box toolbar;
    touchgfx::ScalableImage logo;
    touchgfx::ButtonWithLabel btn_dispatch;
    touchgfx::ButtonWithLabel bth_stop;
    touchgfx::ButtonWithLabel btn_cancel;
    touchgfx::CircleProgress status_operation;
    touchgfx::PainterRGB888Bitmap status_operationPainter;
    touchgfx::ButtonWithLabel btn_pay_sale;
    touchgfx::TextAreaWithOneWildcard lbl_title;
    touchgfx::Slider pump_number_select;
    touchgfx::TextAreaWithOneWildcard lbl_title_pump_selected;
    touchgfx::RadioButton checkbox_regular;
    touchgfx::RadioButton checkbox_premium;
    touchgfx::RadioButton checkbox_regular_diesel;
    touchgfx::RadioButton checkbox_premium_diesel;
    touchgfx::TextArea lbl_title_regular;
    touchgfx::TextArea lbl_title_premium;
    touchgfx::TextArea lbl_title_regular_diesel;
    touchgfx::TextArea lbl_title_premium_diesel;
    touchgfx::ModalWindow popup;
    touchgfx::TextAreaWithOneWildcard lbl_popup;
    touchgfx::ButtonWithLabel btn_popup;
    touchgfx::Box background_progress;
    touchgfx::CircleProgress progress_bar;
    touchgfx::PainterRGB888Bitmap progress_barPainter;
    touchgfx::RadioButtonGroup<4> radioButtonGroup1;

    /*
     * Wildcard Buffers
     */
    static const uint16_t LBL_TITLE_SIZE = 20;
    touchgfx::Unicode::UnicodeChar lbl_titleBuffer[LBL_TITLE_SIZE];
    static const uint16_t LBL_TITLE_PUMP_SELECTED_SIZE = 4;
    touchgfx::Unicode::UnicodeChar lbl_title_pump_selectedBuffer[LBL_TITLE_PUMP_SELECTED_SIZE];
    static const uint16_t LBL_POPUP_SIZE = 100;
    touchgfx::Unicode::UnicodeChar lbl_popupBuffer[LBL_POPUP_SIZE];

private:

    /*
     * Callback Declarations
     */
    touchgfx::Callback<OperationPumpScreenViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<OperationPumpScreenViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<OperationPumpScreenViewBase, const touchgfx::AbstractButton&> radioButtonSelectedCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void radioButtonSelectedCallbackHandler(const touchgfx::AbstractButton& src);

    /*
     * Canvas Buffer Size
     */
    static const uint16_t CANVAS_BUFFER_SIZE = 12000;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];
};

#endif // OPERATIONPUMPSCREENVIEWBASE_HPP
