/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */

#include <stdarg.h>
#include <texts/TypedTextDatabase.hpp>
#include <touchgfx/TextProvider.hpp>
#include <touchgfx/Texts.hpp>
#include <touchgfx/TypedText.hpp>
#include <touchgfx/Unicode.hpp>
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
    va_end(pArg);
    return width;
}

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
    va_end(pArg);
    return width;
}

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
    {
        substituteGlyphs();
        if (nextCharacters.peekChar(1) == 0x093F) //Hindi I-matra
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
}

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
    va_list pArg;
    va_start(pArg, format);
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
    va_end(pArg);
}

//Default typed text database
extern const touchgfx::TypedText::TypedTextData* const typedTextDatabaseArray[];

TEXT_LOCATION_FLASH_PRAGMA
KEEP extern const touchgfx::Unicode::UnicodeChar texts_all_languages[] TEXT_LOCATION_FLASH_ATTRIBUTE =
{
    0x57, 0x65, 0x6c, 0x63, 0x6f, 0x6d, 0x65, 0x20, 0x61, 0x6e, 0x64, 0xa, 0x54, 0x68, 0x61, 0x6e, 0x6b, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x63, 0x68, 0x6f, 0x6f, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x75, 0x73, 0xa, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x20, 0x47, 0x41, 0x53, 0x0, // @0 "Welcome and?Thank you for choosing us?Control GAS"
    0x43, 0x6f, 0x75, 0x6c, 0x64, 0x6e, 0x27, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x2c, 0xa, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x2e, 0x0, // @50 "Couldn't connect to network,?try again please."
    0x49, 0x6e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x20, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x2c, 0x20, 0xa, 0x74, 0x72, 0x79, 0x20, 0x61, 0x67, 0x61, 0x69, 0x6e, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x0, // @97 "Invalid credential, ?try again please"
    0x59, 0x6f, 0x75, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x20, 0x2, 0x20, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x73, 0x0, // @135 "You can dispatch <> liters"
    0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x20, 0x77, 0x69, 0x74, 0x68, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0, // @161 "Problem with service"
    0x4b, 0x65, 0x65, 0x70, 0x20, 0x61, 0x6c, 0x69, 0x76, 0x65, 0xa, 0x20, 0x28, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x29, 0x0, // @182 "Keep alive? (Second)"
    0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x20, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x0, // @203 "Parameters Network"
    0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x4d, 0x51, 0x54, 0x54, 0x20, 0x33, 0x2e, 0x31, 0x2e, 0x31, 0x0, // @222 "Version MQTT 3.1.1"
    0x52, 0x65, 0x73, 0x74, 0x20, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x0, // @241 "Rest waiting time"
    0x49, 0x6e, 0x70, 0x75, 0x74, 0x20, 0x49, 0x44, 0x2c, 0x20, 0x70, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x0, // @259 "Input ID, please"
    0x43, 0x61, 0x72, 0x64, 0x20, 0x72, 0x65, 0x61, 0x64, 0x20, 0x77, 0x61, 0x73, 0x3a, 0x20, 0x0, // @276 "Card read was: "
    0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x3a, 0x20, 0x0, // @292 "Publish topic: "
    0x2, 0x0, // @308 "<>"
    0x51, 0x6f, 0x53, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x30, 0x20, 0x0, // @310 "QoS type 0 "
    0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x49, 0x44, 0x3a, 0x20, 0x0, // @322 "Client ID: "
    0x51, 0x6f, 0x53, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x31, 0x0, // @334 "QoS type 1"
    0x51, 0x6f, 0x53, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x32, 0x0, // @345 "QoS type 2"
    0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x0, // @356 "Password"
    0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x0, // @365 "Cancel"
    0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x0, // @372 "Accept"
    0x31, 0x32, 0x33, 0x20, 0x0, // @379 "123 "
    0x53, 0x53, 0x49, 0x44, 0x0, // @384 "SSID"
    0x41, 0x42, 0x43, 0x0, // @389 "ABC"
    0x4f, 0x6b, 0x0, // @393 "Ok"
    0x4f, 0x4b, 0x0, // @396 "OK"
    0x36, 0x30, 0x0, // @399 "60"
    0x39, 0x0, // @402 "9"
    0x38, 0x0, // @404 "8"
    0x37, 0x0, // @406 "7"
    0x36, 0x0, // @408 "6"
    0x35, 0x0, // @410 "5"
    0x58, 0x0, // @412 "X"
    0x34, 0x0, // @414 "4"
    0x33, 0x0 // @416 "3"
};
TEXT_LOCATION_FLASH_PRAGMA
KEEP extern uint32_t const indicesGb[] TEXT_LOCATION_FLASH_ATTRIBUTE;

//array holding dynamically installed languages
struct TranslationHeader
{
    uint32_t offset_to_texts;
    uint32_t offset_to_indices;
    uint32_t offset_to_typedtext;
};
static const TranslationHeader* languagesArray[1] = { 0 };

//Compiled and linked in languages
static const uint32_t* const staticLanguageIndices[] =
{
    indicesGb
};

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
    {
        if (languagesArray[id] != 0)
        {
            //dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
        }
        else
        {
            //compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
            currentLanguageIndices = staticLanguageIndices[id];
            currentLanguageTypedText = typedTextDatabaseArray[id];
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
    }
}

void touchgfx::Texts::setTranslation(touchgfx::LanguageId id, const void* translation)
{
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
}

